/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-26 09:24:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.search;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.NumberFormat;
import data.dao.SearchDao;
import data.dao.SearchDao;
import data.dto.SearchDto;
import java.util.*;
import java.io.PrintWriter;

public final class searchItem_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("data.dao.SearchDao");
    _jspx_imports_classes.add("data.dto.SearchDto");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    //한글 인코딩
    request.setCharacterEncoding("UTF-8");
    response.setCharacterEncoding("UTF-8");

    NumberFormat nf=NumberFormat.getInstance(Locale.KOREA);
    
    SearchDao dao = new SearchDao();
    String searchText=request.getParameter("searchText");
	/* System.out.println(searchText); */

    //검색 메소드에 사용자가 입력한 값 넣기
    ArrayList<SearchDto> list = dao.getSearch(searchText);

    //만약 사용자가 입력한 값과 일치하는 게 없다면(예를 들어 사과 입력했는데 사과가 없다면) 창 띄워주기
    if (list.size() == 0) {
        PrintWriter script = response.getWriter();
        script.println("<script>");
        script.println("alert('검색결과가 없습니다.')");
        script.println("history.back()");
        script.println("</script>");
    } 
      out.write("\n");
      out.write("<div style = \"width: 100%; height:100%;\">\n");
      out.write("<div style = \"width:400px; margin-left:40%;\">\n");
      out.write("<!--검색 결과 출력-->\n");
      out.write("<br><br><br><br>\n");
      out.write("<h4 style = \"font-size : 20pt;\">'");
      out.print(searchText);
      out.write("'에 대한 검색결과(총 ");
      out.print(list.size());
      out.write("개)</h4>\n");
      out.write("\n");
      out.write("\n");
      out.write("<!--저는 일단 간단하게 테이블 형태로 출력했습니다-->\n");
      out.write("<table>\n");

    //값이 있는 크기만큼만 반복
    for (int i = 0; i < list.size(); i++) {

      out.write("\n");
      out.write("    <!--사진과 타이틀 중 아무거나 클릭하면 상세 페이지로 넘어가도록-->\n");
      out.write("   \n");
      out.write("    <a href=\"index.jsp?main=detail/detailView.jsp?item_num=");
      out.print(list.get(i).getItem_num());
      out.write("\" >\n");
      out.write("    <tr>\n");
      out.write("    	<br><br>\n");
      out.write("        <!--현재 상품 이미지가 안들어가 있어서 null로 떠요-->\n");
      out.write("        <td style=\"top:10px;\"><img src=\"save-info-img/");
      out.print(list.get(i).getItem_img());
      out.write("\" style = \"width:300px;\"></td>\n");
      out.write("       \n");
      out.write("    </tr>\n");
      out.write("	\n");
      out.write("    <tr>\n");
      out.write("        <!--제목 출력 및 제목에 있는 <,>,공백 등이 잘 나올 수 있도록 html 언어로 replaceAll 해주기-->\n");
      out.write("       \n");
      out.write("        <td style = \"font-size:15pt;\">");
      out.print(list.get(i).getItem_name().replaceAll(" ", "&nbsp;").replaceAll("<", "&lt;")
                .replaceAll(">", "&gt;").replaceAll("\n", "<br>"));
      out.write("</td>\n");
      out.write("        \n");
      out.write("    </tr>\n");
      out.write("\n");
      out.write("    <tr>\n");
      out.write("        <td style = \"color:dimgrey;\">");
      out.print(list.get(i).getItem_sub_title().replaceAll(" ", "&nbsp;"));
      out.write("</td>\n");
      out.write("    </tr>\n");
      out.write("    </a>\n");
      out.write("\n");
      out.write("    <tr>\n");
      out.write("        <td style = \"font-size:15pt;\"><b>");
      out.print(nf.format(list.get(i).getItem_price()));
      out.write("원</b></td>\n");
      out.write("    </tr>\n");
      out.write("   \n");

    }

      out.write("\n");
      out.write("\n");
      out.write("</table>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("    ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
