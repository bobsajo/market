/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-24 07:41:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jjim;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.Dao.itemDao;
import java.util.Locale;
import java.text.NumberFormat;
import data.Dto.itemDto;
import data.Dto.JjimDto;
import java.util.List;
import data.Dao.JjimDao;

public final class jjimList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.Dto.itemDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.Dao.JjimDao");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("data.Dto.JjimDto");
    _jspx_imports_classes.add("data.Dao.itemDao");
    _jspx_imports_classes.add("java.text.NumberFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/jjim.css\">\r\n");
      out.write("<link\r\n");
      out.write("        href=\"https://fonts.googleapis.com/css2?family=Anton&family=Edu+VIC+WA+NT+Beginner:wght@600&family=Gamja+Flower&family=Single+Day&family=Jua&family=Nanum+Pen+Script&display=swap\"\r\n");
      out.write("        rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.3.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");

//로그인 상태와 아이디 가져오기 
String loginok=(String)session.getAttribute("loginok");
String myid=(String)session.getAttribute("myid");

//상품이 들어갈때 member_num 받아서 들어오기
	String member_num=request.getParameter("member_num");

//dao 선언
JjimDao db= new JjimDao();
itemDao idao=new itemDao();

NumberFormat nf = NumberFormat.getInstance(Locale.KOREA);

//페이징

	int totalCount;
    int totalPage; //총 페이지 수
    int startPage; //각 블럭의 시작 페이지
    int endPage; //각 블럭의 끝 페이지(예:1~10 다음의 1~10 부분)
    int start; //각 페이지의 시작 번호
    int perPage=5; //한 페이지에 보여질 글의 갯수
    int perBlock=3; //한 블럭 당 보여지는 페이지 갯수(밑에 뜨는 1~10, 다음 이 부분)
    int currentPage; //현재 페이지
    
    
    //총갯수
    totalCount=db.getTotalCount(member_num);
    
    //현재 페이지에 글이 하나도 없어도 블럭을 1페이지로 두겠다, 페이지 있으면 그 페이지로 나타냄
    //현재 페이지번호 읽기(단 null일 때는 1페이지로 설정)
    if(request.getParameter("currentPage")==null)
    	currentPage=1;
    else
    	currentPage=Integer.parseInt(request.getParameter("currentPage"));
    
    //총페이지 갯수
    totalPage=totalCount/perPage+(totalCount%perPage==0?0:1);
    
  //각 블럭의 시작 페이지…현재 페이지가 3(startPage:1, endPage:5)  6(s:6 e:10)
    startPage=(currentPage-1)/perBlock*perBlock+1;
    endPage=startPage+perBlock-1;
    
    
    //총페이지가 8, (6~10…endpage를 8로 수정해주어야 한다)
    //10까지 설정해 놨으나 총 페이지가 8이라면 마지막 페이지를 8로 수정해줘야 한다
    if(endPage>totalPage)
        endPage=totalPage;
    
    //각 페이지에서 불러 올 시작번호
    //현재 페이지가 2라면 startPage는 6이 됨(한 페이지에 5개 들어가니까)
    start=(currentPage-1)*perPage;
    
    List<JjimDto> list;
    list=db.getJjimLike(member_num);
	List<itemDto> ilist=db.getJjimItem(member_num,start,perPage);

      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"jtitle\"><b> 찜한 목록 (");
      out.print(list.size());
      out.write(")</b></div>\r\n");
      out.write("	<hr class=\"jhr1\">\r\n");
      out.write("	<div class=\"jitem-wrap\">\r\n");
      out.write("	");


	for(int i=0; i<ilist.size(); i++){ 
      out.write("\r\n");
      out.write("		<div class=\"jitem\">\r\n");
      out.write("			<img src=\"../save-info-img/");
      out.print(ilist.get(i).getItem_img());
      out.write("\" class=\"jjim-img\" width=\"130\">\r\n");
      out.write("			<div class=\"jcontext\">\r\n");
      out.write("				<span class=\"jname\">");
      out.print(ilist.get(i).getItem_name());
      out.write("</span><br>\r\n");
      out.write("				<span class=\"jprice\">");
      out.print(nf.format(ilist.get(i).getItem_price()));
      out.write("원</span><br>\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"jbtn\">\r\n");
      out.write("				<button class=\"jdel \" type=\"button\">삭제</button> <br>\r\n");
      out.write("				<button class=\"jcart \">장바구니 담기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		<hr class=\"jhr2\">\r\n");
      out.write("		\r\n");
      out.write("		");
 } 
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div class=\"pagination1\">\r\n");
      out.write("		");

			//블록 이전 버튼
			if(startPage>1) { 
      out.write("\r\n");
      out.write("		<a href=\"jjimList.jsp?currentPage=");
      out.print(startPage-1);
      out.write("&member_num=");
      out.print(member_num);
      out.write("\" class=\"p-left\">&laquo;</a>\r\n");
      out.write("		");
 }

			//밑에 블럭 설정
			for(int pp=startPage; pp<=endPage; pp++) {
				if(pp==currentPage) { 
      out.write("\r\n");
      out.write("		<a href=\"jjimList.jsp?currentPage=");
      out.print(pp);
      out.write("&member_num=");
      out.print(member_num);
      out.write("\" class=\"active\">");
      out.print(pp);
      out.write("</a>\r\n");
      out.write("		");
 } else { 
      out.write("\r\n");
      out.write("		<a href=\"jjimList.jsp?currentPage=");
      out.print(pp);
      out.write("&member_num=");
      out.print(member_num);
      out.write('"');
      out.write('>');
      out.print(pp);
      out.write("</a>\r\n");
      out.write("		");
 }
		}

			//블록 다음 버튼
			if(endPage<totalPage) { 
      out.write("\r\n");
      out.write("		<a href=\"jjimList.jsp?currentPage=");
      out.print(endPage+1);
      out.write("&member_num=");
      out.print(member_num);
      out.write("\">&raquo;</a>\r\n");
      out.write("		");
 }
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
