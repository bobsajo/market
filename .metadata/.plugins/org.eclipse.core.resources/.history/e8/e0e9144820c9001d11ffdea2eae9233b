package data.Dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import data.Dto.JjimDto;

import data.Dto.ReviewLikeDto;
import mysql.db.dbConnect;

public class JjimDao {
	dbConnect db=new dbConnect();
	


    //전체 갯수 받아오기(페이징 기법)
    //페이징처리_#1_totalCount
    //n값을 두고 n이 몇 개인지 추출하는 코드, n은 db에 있는 데이터 수(글 수)
    public int getTotalCount(String member_num) {
        int n=0;
        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select count(*) from jjim where member_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1,member_num);
            rs=pstmt.executeQuery();

            if(rs.next()) {
                n=rs.getInt(1); //어떤 열을 넣어도 상관 없음, 상징적으로 1 넣어둔 것
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.dbClose(rs,pstmt,conn);
        }
        return n;
    }

    //페이징처리_#2_List(start,perpage) //페이지를 어떻게 줄 건지:perpage
    //추천순으로 정렬
    public List<JjimDto> getJjimLike(String member_num, int start,int perpage) {
        List<JjimDto> list=new Vector<>();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        //많이 쓰는 코드, limit 0,5하면 0~5개를 보여주는 것
        String sql="select * from jjim where member_num=? order by jjim_num desc limit ?,?";

        try {
            pstmt=conn.prepareStatement(sql);

            //바인딩
            pstmt.setString(1,member_num);
            pstmt.setInt(2,start);
            pstmt.setInt(3,perpage);

            rs=pstmt.executeQuery();

            //몇 번째부터 몇 번째까지라는 제한만 있을 뿐, 그 사이에서 전체 데이터를 불러 오는 건 똑같음
            //그래서 이 부분은 getAllData()와 코드가 일치
            while(rs.next()) {
                JjimDto dto=new JjimDto();

                dto.setJjim_num(rs.getString("jjim_num"));
                dto.setMember_num(rs.getString("member_num"));
                dto.setItem_num(rs.getString("item_num"));

                //리스트에 추가
                list.add(dto);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            db.dbClose(rs,pstmt,conn);
        }
        return list;
    }

    //최신순으로 정렬
    public List<JjimDto> getListNew(String member_num, int start,int perpage) {
        List<JjimDto> list=new Vector<>();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        //많이 쓰는 코드, limit 0,5하면 0~5개를 보여주는 것
        String sql="select * from jjim where member_num=? order by jjim_num desc limit ?,?";

        try {
            pstmt=conn.prepareStatement(sql);

            //바인딩
            pstmt.setString(1,member_num);
            pstmt.setInt(2,start);
            pstmt.setInt(3,perpage);

            rs=pstmt.executeQuery();

            //몇 번째부터 몇 번째까지라는 제한만 있을 뿐, 그 사이에서 전체 데이터를 불러 오는 건 똑같음
            //그래서 이 부분은 getAllData()와 코드가 일치
            while(rs.next()) {
                JjimDto dto=new JjimDto();

                dto.setJjim_num(rs.getString("jjim_num"));
                dto.setMember_num(rs.getString("member_num"));
                dto.setItem_num(rs.getString("item_num"));

                //리스트에 추가
                list.add(dto);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            db.dbClose(rs,pstmt,conn);
        }
        return list;
    }

    //getData --> multi form으로 데이터 삭제 시 사용 가능
    public JjimDto getData(String jjim_num) {
        JjimDto dto=new JjimDto();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select * from jjim where jjim_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1, jjim_num);
            rs=pstmt.executeQuery();

            //하나의 데이터만 필요하니까 if
            if(rs.next()) {
                dto.setJjim_num(rs.getString("jjim_num"));
                dto.setMember_num(rs.getString("member_num"));
                dto.setItem_num(rs.getString("item_num"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            db.dbClose(rs, pstmt, conn);
        }
        return dto;
    }

    
    //member_num,item_num,review_num 넘겨주면 reviewlike에 저장하기
    //insert
    public void insertJjimLike(String jjim_num,String member_num, String item_num) {
        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;

        String sql="insert into jjim values(?,?,?)";

        try {
            pstmt= conn.prepareStatement(sql);
            pstmt.setString(1,jjim_num);
            pstmt.setString(2,member_num);
            pstmt.setString(3,item_num);

            pstmt.execute();
        } catch (SQLException e) {
            e.getMessage();
        } finally {
            db.dbClose(pstmt,conn);
        }
    }

    //reviewlike getData
    public ReviewLikeDto getReviewLike(String member_num) {
        ReviewLikeDto dto=new ReviewLikeDto();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select * from jjim where member_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1,member_num);
            pstmt.executeQuery();

            if(rs.next()) {
                dto.setMember_num(rs.getString("member_num"));
                dto.setItem_num(rs.getString("item_num"));
                dto.setItem_num(rs.getString("review_num"));
            }
        } catch (SQLException e) {
            e.getMessage();
        } finally {
            db.dbClose(rs,pstmt,conn);
        }
        return dto;
    }

    //삭제
    public void deleteReviewLike(String member_num, String item_num, String jjim_num) {
        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;

        String sql="delete from jjim where member_num=? and item_num=? and  jjim_num=?";

        try {
            pstmt=conn.prepareStatement(sql);

            pstmt.setString(1,member_num);
            pstmt.setString(2,item_num);
            pstmt.setString(3, jjim_num);

            pstmt.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.dbClose(pstmt,conn);
        }
    }

    //reviewlike 조회
    public ReviewLikeDto getReviewLike(String member_num, String item_num) {
        ReviewLikeDto dto=new ReviewLikeDto();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select * from reviewlike where member_num=? and item_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1,member_num);
            pstmt.setString(2,item_num);

            rs=pstmt.executeQuery();

            if(rs.next()) {
                dto.setMember_num(rs.getString("member_num"));
                dto.setItem_num(rs.getString("item_num"));
                dto.setReview_num(rs.getString("review_num"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.dbClose(rs,pstmt,conn);
        }
        return dto;
    }

    public boolean hasReviewLike(String member_num, String item_num, String review_num) {
        boolean has=false;

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select count(*) from reviewlike where member_num=? and item_num=? and review_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1,member_num);
            pstmt.setString(2,item_num);
            pstmt.setString(3,review_num);
            rs=pstmt.executeQuery();

            if(rs.next()) {
                has=true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.dbClose(rs,pstmt,conn);
        }
        return has;
    }

    public List<String> selectReviewNum(String member_num, String item_num) {
        List<String> reviewArr=new ArrayList<>();

        Connection conn=db.getConnection();
        PreparedStatement pstmt=null;
        ResultSet rs=null;

        String sql="select review_num from reviewlike where member_num=? and item_num=?";

        try {
            pstmt=conn.prepareStatement(sql);
            pstmt.setString(1,member_num);
            pstmt.setString(2,item_num);
            rs=pstmt.executeQuery();

            while(rs.next()) {
                reviewArr.add(rs.getString("review_num"));
//                reviewArr.add("1");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.dbClose(rs,pstmt,conn);
        }
        return reviewArr;
    }


}


